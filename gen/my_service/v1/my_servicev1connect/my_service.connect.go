// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: my_service/v1/my_service.proto

package my_servicev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/suzushin54/go-api-with-connect/gen/my_service/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MyServiceName is the fully-qualified name of the MyService service.
	MyServiceName = "my_service.v1.MyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MyServiceHelloWorldProcedure is the fully-qualified name of the MyService's HelloWorld RPC.
	MyServiceHelloWorldProcedure = "/my_service.v1.MyService/HelloWorld"
)

// MyServiceClient is a client for the my_service.v1.MyService service.
type MyServiceClient interface {
	HelloWorld(context.Context, *connect_go.Request[v1.HelloWorldRequest]) (*connect_go.Response[v1.HelloWorldResponse], error)
}

// NewMyServiceClient constructs a client for the my_service.v1.MyService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMyServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &myServiceClient{
		helloWorld: connect_go.NewClient[v1.HelloWorldRequest, v1.HelloWorldResponse](
			httpClient,
			baseURL+MyServiceHelloWorldProcedure,
			opts...,
		),
	}
}

// myServiceClient implements MyServiceClient.
type myServiceClient struct {
	helloWorld *connect_go.Client[v1.HelloWorldRequest, v1.HelloWorldResponse]
}

// HelloWorld calls my_service.v1.MyService.HelloWorld.
func (c *myServiceClient) HelloWorld(ctx context.Context, req *connect_go.Request[v1.HelloWorldRequest]) (*connect_go.Response[v1.HelloWorldResponse], error) {
	return c.helloWorld.CallUnary(ctx, req)
}

// MyServiceHandler is an implementation of the my_service.v1.MyService service.
type MyServiceHandler interface {
	HelloWorld(context.Context, *connect_go.Request[v1.HelloWorldRequest]) (*connect_go.Response[v1.HelloWorldResponse], error)
}

// NewMyServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMyServiceHandler(svc MyServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(MyServiceHelloWorldProcedure, connect_go.NewUnaryHandler(
		MyServiceHelloWorldProcedure,
		svc.HelloWorld,
		opts...,
	))
	return "/my_service.v1.MyService/", mux
}

// UnimplementedMyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMyServiceHandler struct{}

func (UnimplementedMyServiceHandler) HelloWorld(context.Context, *connect_go.Request[v1.HelloWorldRequest]) (*connect_go.Response[v1.HelloWorldResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("my_service.v1.MyService.HelloWorld is not implemented"))
}
